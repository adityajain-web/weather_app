{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","style","width","city","weather_icon","temp_celsius","h1","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","placeholder","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","weatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b57c24f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container\" style={{ width: '18rem' }}>\r\n            <div className=\"text-white my-2 shadow-lg\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\"><i className={`wi ${props.weather_icon} display-1`}></i></h5>\r\n                {props.temp_celsius ? (<h1 h1 className=\"py-0\">{props.temp_celsius}&deg;</h1>) : null}\r\n                {/* {show min and max temp} */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\" autoComplete=\"Off\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\" autoComplete=\"Off\" />\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction error() {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter city and country.\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component'\nimport Form from './app_component/form.component'\n\n// API call api.openweathermap.org / data / 2.5 / weather ? q = London, uk & appid={ API key }\nconst API_key = \"5ba192cc03a89eb84445ea1c6c5bf568\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    }\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-strom-shower\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232: this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321: this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 532: this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622: this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781: this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId === 800: this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804: this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default: this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else {\n      this.setState({\n        error: true\n      })\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"text-white py-5\">\n          <h3>Weather App Using React</h3>\n        </div>\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n        <Weather city={this.state.city} country={this.state.country} temp_celsius={this.state.celsius} temp_min={this.state.temp_min} temp_max={this.state.temp_max} description={this.state.description} weather_icon={this.state.icon} />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}